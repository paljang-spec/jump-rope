import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime
from contextlib import contextmanager
import io

# Page Configuration
st.set_page_config(page_title="경조사 금액 관리", page_icon="💰", layout="wide")

# --- Database Management ---
@contextmanager
def db_cursor():
    """Context manager for database connection and cursor."""
    conn = None
    try:
        conn = sqlite3.connect("donation_data.db")
        cursor = conn.cursor()
        yield cursor
        conn.commit()
    except sqlite3.Error as e:
        st.error(f"데이터베이스 오류: {e}")
        if conn:
            conn.rollback()
        raise
    finally:
        if conn:
            conn.close()

def init_database():
    """Initialize the database table if it doesn't exist."""
    try:
        with db_cursor() as cursor:
            cursor.execute('''CREATE TABLE IF NOT EXISTS donations (
                                id INTEGER PRIMARY KEY,
                                name TEXT NOT NULL,
                                amount REAL NOT NULL,
                                date TEXT NOT NULL,
                                category TEXT
                            )''')
    except sqlite3.Error as e:
        st.error(f"데이터베이스 초기화 실패: {e}")
        st.stop()

def format_currency(amount):
    """Format amount as currency."""
    if amount is None:
        return "0"
    return f"{float(amount):,.0f}"

# --- Main Application ---
def main():
    st.title("💰 경조사 금액 관리 프로그램")

    # Initialize database
    init_database()

    # --- Sidebar for Inputs ---
    with st.sidebar:
        st.header("정보 입력/수정")

        # Check if we are in edit mode
        if 'edit_id' in st.session_state and st.session_state.edit_id:
            st.info(f"ID: {st.session_state.edit_id} 항목을 수정 중입니다.")

        name = st.text_input("이름", value=st.session_state.get('name', ''))
        category = st.selectbox("카테고리", ["결혼", "장례", "생일", "기타"], index=["결혼", "장례", "생일", "기타"].index(st.session_state.get('category', '결혼')))
        amount = st.number_input("금액", min_value=0, step=10000, value=st.session_state.get('amount', 0))

        # Quick Amount Buttons
        st.write("**간편 입력:**")
        fav_amounts = [10000, 30000, 50000, 100000, 300000, 500000]
        cols = st.columns(3)
        for i, fav_amount in enumerate(fav_amounts):
            if cols[i % 3].button(f"{fav_amount // 10000}만" if fav_amount >= 10000 else f"{fav_amount}원"):
                amount = fav_amount


        col1, col2, col3 = st.columns([1,1,1])

        # Add/Update Button
        if 'edit_id' in st.session_state and st.session_state.edit_id:
            if col1.button("수정 완료", use_container_width=True, type="primary"):
                update_donation(st.session_state.edit_id, name, amount, category)
            if col2.button("취소", use_container_width=True):
                clear_edit_state()
        else:
            if col1.button("추가하기", use_container_width=True, type="primary"):
                add_donation(name, amount, category)

    # --- Main Content Area ---
    st.header("경조사 목록")

    # Search and Sort
    col1, col2 = st.columns([3, 1])
    with col1:
        search_term = st.text_input("이름으로 검색", placeholder="검색할 이름을 입력하세요...")
    with col2:
        sort_by = st.radio("정렬 기준", ["날짜", "이름", "금액"], horizontal=True)

    # Load and display data
    df = load_donations(search_term, sort_by)
    st.dataframe(df.style.apply(lambda x: ['background-color: #e0f7fa' if x.amount >= 100000 else '' for i in x], axis=1), use_container_width=True)


    # --- Totals and Actions ---
    total_amount = df['amount'].sum()
    st.metric(label="총 금액", value=f"{format_currency(total_amount)} 원")

    # Edit and Delete buttons
    selected_id = st.selectbox("수정 또는 삭제할 항목의 ID를 선택하세요.", options=[""] + list(df['id']))
    if selected_id:
        col1, col2 = st.columns(2)
        if col1.button("선택한 항목 수정하기"):
            start_edit(selected_id)
        if col2.button("선택한 항목 삭제하기", type="secondary"):
            delete_donation(selected_id)

    # --- Data Export ---
    st.markdown("---")
    st.header("데이터 내보내기")
    export_col1, export_col2 = st.columns(2)
    csv_data = df.to_csv(index=False, encoding='utf-8-sig')
    txt_data = df.to_string(index=False)

    export_col1.download_button(
        label="CSV 파일로 다운로드",
        data=csv_data,
        file_name='donations.csv',
        mime='text/csv',
    )
    export_col2.download_button(
        label="텍스트 파일로 다운로드",
        data=txt_data,
        file_name='donations.txt',
        mime='text/plain',
    )


def add_donation(name, amount, category):
    if not name or amount <= 0:
        st.warning("이름과 0보다 큰 금액을 입력해주세요.")
        return
    try:
        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with db_cursor() as cursor:
            cursor.execute("INSERT INTO donations (name, amount, date, category) VALUES (?, ?, ?, ?)",
                         (name, amount, date, category))
        st.success(f"'{name}'님의 정보가 추가되었습니다.")
    except sqlite3.Error as e:
        st.error(f"추가 실패: {e}")

def load_donations(search_term="", sort_by="날짜"):
    sort_map = {"날짜": "date", "이름": "name", "금액": "amount"}
    sort_column = sort_map.get(sort_by, "date")
    try:
        with db_cursor() as cursor:
            query = f"SELECT id, name, amount, date, category FROM donations WHERE name LIKE ? ORDER BY {sort_column} DESC"
            cursor.execute(query, (f"%{search_term}%",))
            rows = cursor.fetchall()
            df = pd.DataFrame(rows, columns=['id', 'name', 'amount', 'date', 'category'])
            return df
    except sqlite3.Error as e:
        st.error(f"데이터 로드 실패: {e}")
        return pd.DataFrame()

def delete_donation(item_id):
    try:
        with db_cursor() as cursor:
            cursor.execute("DELETE FROM donations WHERE id=?", (item_id,))
        st.success(f"ID {item_id} 항목이 삭제되었습니다.")
        st.experimental_rerun()
    except sqlite3.Error as e:
        st.error(f"삭제 실패: {e}")

def start_edit(item_id):
    try:
        with db_cursor() as cursor:
            cursor.execute("SELECT name, amount, category FROM donations WHERE id=?", (item_id,))
            record = cursor.fetchone()
        if record:
            st.session_state.edit_id = item_id
            st.session_state.name = record[0]
            st.session_state.amount = int(record[1])
            st.session_state.category = record[2]
            st.experimental_rerun()
    except sqlite3.Error as e:
        st.error(f"수정할 데이터 조회 실패: {e}")

def update_donation(item_id, name, amount, category):
    if not name or amount <= 0:
        st.warning("이름과 0보다 큰 금액을 입력해주세요.")
        return
    try:
        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with db_cursor() as cursor:
            cursor.execute("UPDATE donations SET name=?, amount=?, category=?, date=? WHERE id=?",
                         (name, amount, category, date, item_id))
        st.success(f"ID {item_id} 항목이 수정되었습니다.")
        clear_edit_state()
    except sqlite3.Error as e:
        st.error(f"수정 실패: {e}")

def clear_edit_state():
    """Clears the editing state from the session."""
    st.session_state.pop('edit_id', None)
    st.session_state.pop('name', None)
    st.session_state.pop('amount', None)
    st.session_state.pop('category', None)
    st.experimental_rerun()


if __name__ == "__main__":
    main()
